const express = require('express');
const router = express.Router();
const jwt = require('jsonwebtoken');
const { verifyToken } = require('../middleware/auth');
const pdfGenerator = require('../services/pdf-generator');

console.log('üìÑ PDF Reports router initialized');

// ÏøºÎ¶¨ ÌååÎùºÎØ∏ÌÑ∞ ÌÜ†ÌÅ∞ Ïù∏Ï¶ù ÎØ∏Îì§Ïõ®Ïñ¥
const verifyTokenFromQuery = (req, res, next) => {
  // ÏøºÎ¶¨ ÌååÎùºÎØ∏ÌÑ∞ÏóêÏÑú ÌÜ†ÌÅ∞ ÌôïÏù∏
  const queryToken = req.query.token;
  
  if (queryToken) {
    // ÏøºÎ¶¨ ÌååÎùºÎØ∏ÌÑ∞ ÌÜ†ÌÅ∞ÏùÑ Ìó§ÎçîÎ°ú ÏÑ§Ï†ï
    req.headers.authorization = `Bearer ${queryToken}`;
  }
  
  // Í∏∞Ï°¥ verifyToken ÎØ∏Îì§Ïõ®Ïñ¥ Ìò∏Ï∂ú
  verifyToken(req, res, next);
};

// Ïù∏Ï¶ù ÎØ∏Îì§Ïõ®Ïñ¥ (ÏøºÎ¶¨ ÌååÎùºÎØ∏ÌÑ∞ ÏßÄÏõê)
router.use(verifyTokenFromQuery);

// ============================
// ÏÉÅÎã¥ Î≥¥Í≥†ÏÑú PDF ÏÉùÏÑ±
// ============================
router.get('/consultation/:consultationId/student/:studentId', async (req, res) => {
  console.log('PDF-REPORTS (non-v2): Route handler called!');
  try {
    const { consultationId, studentId } = req.params;
    
    console.log(`üìÑ Generating PDF for consultation ${consultationId}, student ${studentId}`);
    
    // PDF ÏÉùÏÑ±
    const pdfBuffer = await pdfGenerator.generateConsultationReport(
      consultationId, 
      studentId
    );
    
    // ÌååÏùºÎ™Ö ÏÉùÏÑ±
    const filename = `consultation_report_${studentId}_${consultationId}_${Date.now()}.pdf`;
    
    // PDF ÏùëÎãµ Ìó§Îçî ÏÑ§Ï†ï
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
    res.setHeader('Content-Length', pdfBuffer.length);
    
    // PDF Ï†ÑÏÜ°
    res.send(pdfBuffer);
    
    console.log(`‚úÖ PDF sent successfully: ${filename}`);
    
  } catch (error) {
    console.error('‚ùå PDF generation error:', error);
    res.status(500).json({
      error: 'Failed to generate PDF',
      message: error.message,
      message_ko: 'PDF ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§'
    });
  }
});

// ============================
// ÌïôÏÉùÎ≥Ñ Ï†ÑÏ≤¥ Î≥¥Í≥†ÏÑú PDF ÏÉùÏÑ±
// ============================
router.get('/student/:studentId/complete', async (req, res) => {
  try {
    const { studentId } = req.params;
    const { limit = 5 } = req.query; // ÏµúÍ∑º 5Í∞ú ÏÉÅÎã¥ Í∏∞Î°ù
    
    console.log(`üìÑ Generating complete report for student ${studentId}`);
    
    // ÏµúÍ∑º ÏÉÅÎã¥ ID Ï°∞Ìöå
    const db = require('../config/database');
    const consultations = await db('consultations')
      .where('student_id', studentId)
      .orderBy('consultation_date', 'desc')
      .limit(limit)
      .select('consultation_id');
    
    if (consultations.length === 0) {
      return res.status(404).json({
        error: 'No consultations found',
        message_ko: 'ÏÉÅÎã¥ Í∏∞Î°ùÏù¥ ÏóÜÏäµÎãàÎã§'
      });
    }
    
    // Í∞Å ÏÉÅÎã¥Ïóê ÎåÄÌïú PDF ÏÉùÏÑ±
    const pdfBuffers = [];
    for (const consultation of consultations) {
      const pdfBuffer = await pdfGenerator.generateConsultationReport(
        consultation.consultation_id,
        studentId
      );
      pdfBuffers.push(pdfBuffer);
    }
    
    // TODO: PDF Î≥ëÌï© Î°úÏßÅ Íµ¨ÌòÑ (pdf-lib ÏÇ¨Ïö©)
    // ÌòÑÏû¨Îäî Ï≤´ Î≤àÏß∏ PDFÎßå Î∞òÌôò
    const pdfBuffer = pdfBuffers[0];
    
    // ÌååÏùºÎ™Ö ÏÉùÏÑ±
    const filename = `student_complete_report_${studentId}_${Date.now()}.pdf`;
    
    // PDF ÏùëÎãµ
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
    res.setHeader('Content-Length', pdfBuffer.length);
    
    res.send(pdfBuffer);
    
  } catch (error) {
    console.error('‚ùå Complete report generation error:', error);
    res.status(500).json({
      error: 'Failed to generate complete report',
      message: error.message,
      message_ko: 'Ï¢ÖÌï© Î≥¥Í≥†ÏÑú ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§'
    });
  }
});

// ============================
// PDF ÎØ∏Î¶¨Î≥¥Í∏∞ (HTML Î∞òÌôò)
// ============================
router.get('/preview/consultation/:consultationId/student/:studentId', async (req, res) => {
  try {
    const { consultationId, studentId } = req.params;
    
    console.log(`üëÅÔ∏è Generating preview for consultation ${consultationId}`);
    
    // Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
    const data = await pdfGenerator.fetchReportData(consultationId, studentId);
    
    // HTML ÌÖúÌîåÎ¶ø Î°úÎìú
    const fs = require('fs').promises;
    const path = require('path');
    const templatePath = path.join(__dirname, '..', 'templates', 'consultation-report.html');
    const template = await fs.readFile(templatePath, 'utf-8');
    
    // Îç∞Ïù¥ÌÑ∞ Î∞îÏù∏Îî©
    const html = pdfGenerator.bindDataToTemplate(template, data);
    
    // HTML ÏùëÎãµ
    res.setHeader('Content-Type', 'text/html; charset=utf-8');
    res.send(html);
    
  } catch (error) {
    console.error('‚ùå Preview generation error:', error);
    res.status(500).json({
      error: 'Failed to generate preview',
      message: error.message,
      message_ko: 'ÎØ∏Î¶¨Î≥¥Í∏∞ ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§'
    });
  }
});

// ============================
// ÎπÑÏûê/ÎåÄÌïô Ï†úÏ∂úÏö© Í≥µÏãù Î≥¥Í≥†ÏÑú
// ============================
router.post('/official', async (req, res) => {
  try {
    const { 
      studentId, 
      consultationIds, 
      purpose, // 'visa' or 'university'
      additionalInfo 
    } = req.body;
    
    console.log(`üìÑ Generating official report for ${purpose}`);
    
    // Í∂åÌïú Ï≤¥ÌÅ¨ - Í¥ÄÎ¶¨Ïûê ÎòêÎäî Ìï¥Îãπ ÌïôÏÉùÏùò ÏÉÅÎã¥ÏÇ¨Îßå
    if (req.user.role !== 'admin' && req.user.role !== 'branch') {
      return res.status(403).json({
        error: 'Access denied',
        message_ko: 'Í≥µÏãù Î≥¥Í≥†ÏÑú ÏÉùÏÑ± Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§'
      });
    }
    
    // ÌïÑÏàò ÏÉÅÎã¥ÏÇ¨ ÌèâÍ∞Ä ÌôïÏù∏
    const db = require('../config/database');
    for (const consultationId of consultationIds) {
      const consultation = await db('consultations')
        .where('consultation_id', consultationId)
        .first();
      
      if (!consultation || !consultation.action_items) {
        return res.status(400).json({
          error: 'Missing counselor evaluation',
          message_ko: 'ÏÉÅÎã¥ÏÇ¨ ÌèâÍ∞ÄÍ∞Ä ÎàÑÎùΩÎêú ÏÉÅÎã¥Ïù¥ ÏûàÏäµÎãàÎã§',
          consultation_id: consultationId
        });
      }
      
      // action_itemsÏóê counselor_evaluation ÌôïÏù∏
      const actionItems = typeof consultation.action_items === 'string'
        ? JSON.parse(consultation.action_items)
        : consultation.action_items;
      
      if (!actionItems.counselor_evaluation) {
        return res.status(400).json({
          error: 'Counselor evaluation is required for official reports',
          message_ko: 'Í≥µÏãù Î≥¥Í≥†ÏÑúÏóêÎäî ÏÉÅÎã¥ÏÇ¨ ÌèâÍ∞ÄÍ∞Ä ÌïÑÏàòÏûÖÎãàÎã§',
          consultation_id: consultationId
        });
      }
    }
    
    // PDF ÏÉùÏÑ±
    const pdfBuffer = await pdfGenerator.generateBatchReport(consultationIds);
    
    // ÌååÏùºÎ™Ö ÏÉùÏÑ± (Î™©Ï†ÅÏóê Îî∞Îùº)
    const purposePrefix = purpose === 'visa' ? 'visa_application' : 'university_admission';
    const filename = `${purposePrefix}_report_${studentId}_${Date.now()}.pdf`;
    
    // ÏÉùÏÑ± Í∏∞Î°ù Ï†ÄÏû•
    await db('report_logs').insert({
      student_id: studentId,
      report_type: 'official',
      purpose: purpose,
      consultation_ids: JSON.stringify(consultationIds),
      filename: filename,
      created_by: req.user.user_id,
      created_at: new Date()
    });
    
    // PDF ÏùëÎãµ
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
    res.setHeader('Content-Length', pdfBuffer.length);
    
    res.send(pdfBuffer);
    
    console.log(`‚úÖ Official report generated: ${filename}`);
    
  } catch (error) {
    console.error('‚ùå Official report generation error:', error);
    res.status(500).json({
      error: 'Failed to generate official report',
      message: error.message,
      message_ko: 'Í≥µÏãù Î≥¥Í≥†ÏÑú ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§'
    });
  }
});

// ============================
// Î≥¥Í≥†ÏÑú ÏÉùÏÑ± Ïù¥Î†• Ï°∞Ìöå
// ============================
router.get('/history/student/:studentId', async (req, res) => {
  try {
    const { studentId } = req.params;
    
    const db = require('../config/database');
    const history = await db('report_logs as r')
      .leftJoin('users as u', 'r.created_by', 'u.user_id')
      .where('r.student_id', studentId)
      .orderBy('r.created_at', 'desc')
      .select(
        'r.report_id',
        'r.report_type',
        'r.purpose',
        'r.filename',
        'r.created_at',
        'u.name as created_by_name'
      );
    
    res.json({
      success: true,
      data: history
    });
    
  } catch (error) {
    console.error('‚ùå Failed to get report history:', error);
    res.status(500).json({
      error: 'Failed to get report history',
      message: error.message
    });
  }
});

module.exports = router;