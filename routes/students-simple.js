const express = require('express');
const router = express.Router();
const { body, validationResult } = require('express-validator');
const db = require('../config/database');
const { verifyToken, checkRole } = require('../middleware/auth');
const { logAction } = require('../middleware/auditLog');

// Î™®Îì† ÎùºÏö∞Ìä∏Ïóê Ïù∏Ï¶ù ÌïÑÏöî
router.use((req, res, next) => {
  console.log('üìå Students-Simple Router Called:', req.method, req.path);
  console.log('üìå Authorization header:', req.headers.authorization);
  next();
});
router.use(verifyToken);

// ÌïôÏÉù Î™©Î°ù Ï°∞Ìöå (Í∞ÑÎã® Î≤ÑÏ†Ñ - Î∑∞ ÏÇ¨Ïö©)
router.get('/', async (req, res) => {
  try {
    console.log('üîç ÌïôÏÉù Î™©Î°ù Ï°∞Ìöå ÏãúÏûë...');
    console.log('ÏöîÏ≤≠ Ï†ïÎ≥¥:', { user: req.user, query: req.query });
    
    const { status, agency_id, page = 1, limit = 20 } = req.query;
    const offset = (page - 1) * limit;

    let query = db('student_list_view');

    // Í∂åÌïúÎ≥Ñ ÌïÑÌÑ∞ÎßÅ
    if (req.user.role === 'teacher') {
      // ÍµêÏÇ¨Îäî ÏûêÏã†Ïùò user_idÎ•º agency_idÎ°ú ÏÇ¨Ïö©
      const teacherAgencyId = req.user.user_id;
      query = query.where('agency_id', teacherAgencyId);
    }

    // ÏÉÅÌÉú ÌïÑÌÑ∞
    if (status) {
      query = query.where('status', status);
    }

    // Ïú†ÌïôÏõê ÌïÑÌÑ∞ (Í¥ÄÎ¶¨ÏûêÏö©)
    if (agency_id && req.user.role === 'admin') {
      query = query.where('agency_id', agency_id);
    }

    // Ï†ÑÏ≤¥ Í∞úÏàò Ï°∞Ìöå
    const totalQuery = query.clone();
    const countResult = await totalQuery.count('student_id as count').first();
    const count = countResult.count;

    // ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò Ï†ÅÏö©
    const students = await query
      .orderBy('student_id', 'desc')
      .limit(limit)
      .offset(offset);

    res.json({
      success: true,
      data: students,
      pagination: {
        current_page: parseInt(page),
        total_pages: Math.ceil(count / limit),
        total_items: parseInt(count),
        items_per_page: parseInt(limit)
      }
    });

  } catch (error) {
    console.error('‚ùå Error fetching students:', error);
    console.error('ÏóêÎü¨ ÏÉÅÏÑ∏:', error.stack);
    res.status(500).json({
      success: false,
      error: error.message || 'Failed to fetch students'
    });
  }
});

// ÌïôÏÉù ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï°∞Ìöå
router.get('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    
    // student_full_info Î∑∞ ÏÇ¨Ïö©
    const student = await db('student_full_info')
      .where('student_id', id)
      .first();

    if (!student) {
      return res.status(404).json({
        success: false,
        error: 'Student not found'
      });
    }

    // Í∂åÌïú Ï≤¥ÌÅ¨
    if (req.user.role === 'teacher' && student.agency_id !== req.user.user_id) {
      return res.status(403).json({
        success: false,
        error: 'Access denied'
      });
    }

    // ÎØºÍ∞êÏ†ïÎ≥¥ Ï†ëÍ∑º Î°úÍ∑∏
    await logAction(req, 'VIEW', 'students', id);

    res.json({
      success: true,
      data: student
    });

  } catch (error) {
    console.error('Error fetching student:', error);
    res.status(500).json({
      success: false,
      error: error.message || 'Failed to fetch student'
    });
  }
});

// ÌïôÏÉù Îì±Î°ù
router.post('/', [
  body('student_code').notEmpty().trim(),
  body('korean_name').notEmpty().trim(),
  body('agency_id').optional().isNumeric()
], async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { student_code, korean_name, vietnamese_name, phone, email, birth_date, agency_id, ...otherData } = req.body;

    // Í∂åÌïú Ï≤¥ÌÅ¨
    if (req.user.role === 'teacher') {
      // ÍµêÏÇ¨Îäî ÏûêÏã†Ïùò Ïú†ÌïôÏõê ÌïôÏÉùÎßå Îì±Î°ù Í∞ÄÎä•
      req.body.agency_id = req.user.user_id;
    }

    // ÎîîÎ≤ÑÍπÖ: ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÌôïÏù∏
    console.log('üîç DEBUG - req.user:', JSON.stringify(req.user, null, 2));
    console.log('üîç DEBUG - req.user.user_id:', req.user.user_id);
    console.log('üîç DEBUG - req.user.role:', req.user.role);

    // Ìä∏ÎûúÏû≠ÏÖò ÏãúÏûë
    const result = await db.transaction(async trx => {
      // 1. students ÌÖåÏù¥Î∏îÏóê Í∏∞Î≥∏ Ï†ïÎ≥¥ ÏÇΩÏûÖ
      const insertData = {
        student_code,
        status: 'studying', // 'active' ÎåÄÏã† 'studying' ÏÇ¨Ïö© (DB Ï†úÏïΩÏ°∞Í±¥Ïóê ÎßûÏ∂§)
        agency_id: agency_id || (req.user.role === 'teacher' ? req.user.user_id : null),
        created_by: req.user.user_id
      };
      
      console.log('üîç DEBUG - Insert data:', JSON.stringify(insertData, null, 2));
      
      const studentResult = await trx('students')
        .insert(insertData)
        .returning(['student_id', 'student_code', 'status']);
      
      // PostgreSQLÏùÄ Î∞∞Ïó¥Î°ú Î∞òÌôò, Ï≤´ Î≤àÏß∏ ÏöîÏÜå Ï∂îÏ∂ú
      const student = Array.isArray(studentResult) ? studentResult[0] : studentResult;

      // 2. student_attributes ÌÖåÏù¥Î∏îÏóê ÏÜçÏÑ± ÏÇΩÏûÖ
      const attributes = [];
      
      if (korean_name) {
        attributes.push({
          student_id: student.student_id,
          attribute_name: 'korean_name',
          attribute_value: korean_name
        });
      }
      
      if (vietnamese_name) {
        attributes.push({
          student_id: student.student_id,
          attribute_name: 'vietnamese_name',
          attribute_value: vietnamese_name
        });
      }
      
      if (phone) {
        attributes.push({
          student_id: student.student_id,
          attribute_name: 'phone',
          attribute_value: phone
        });
      }
      
      if (email) {
        attributes.push({
          student_id: student.student_id,
          attribute_name: 'email',
          attribute_value: email
        });
      }
      
      if (birth_date) {
        attributes.push({
          student_id: student.student_id,
          attribute_name: 'birth_date',
          attribute_value: birth_date
        });
      }

      // Í∏∞ÌÉÄ ÏÜçÏÑ±Îì§ Ï∂îÍ∞Ä
      for (const [key, value] of Object.entries(otherData)) {
        if (value) {
          attributes.push({
            student_id: student.student_id,
            attribute_name: key,
            attribute_value: String(value)
          });
        }
      }

      if (attributes.length > 0) {
        await trx('student_attributes').insert(attributes);
      }

      // ÏÉùÏÑ± Î°úÍ∑∏
      await logAction(req, 'CREATE', 'students', student.student_id);

      return student;
    });

    res.status(201).json({
      success: true,
      data: result,
      message: 'Student created successfully'
    });

  } catch (error) {
    console.error('Error creating student:', error);
    res.status(500).json({
      success: false,
      error: error.message || 'Failed to create student'
    });
  }
});

// ÌïôÏÉù Ï†ïÎ≥¥ ÏàòÏ†ï
router.put('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const updates = req.body;

    // Í∂åÌïú Ï≤¥ÌÅ¨
    const student = await db('students').where('student_id', id).first();
    if (!student) {
      return res.status(404).json({
        success: false,
        error: 'Student not found'
      });
    }

    if (req.user.role === 'teacher' && student.agency_id !== req.user.user_id) {
      return res.status(403).json({
        success: false,
        error: 'Access denied'
      });
    }

    // Ìä∏ÎûúÏû≠ÏÖò ÏãúÏûë
    await db.transaction(async trx => {
      // students ÌÖåÏù¥Î∏î ÏóÖÎç∞Ïù¥Ìä∏ (status, agency_id)
      if (updates.status || updates.agency_id) {
        await trx('students')
          .where('student_id', id)
          .update({
            status: updates.status || student.status,
            agency_id: updates.agency_id || student.agency_id,
            updated_at: new Date()
          });
      }

      // student_attributes ÏóÖÎç∞Ïù¥Ìä∏
      for (const [key, value] of Object.entries(updates)) {
        if (key !== 'status' && key !== 'agency_id' && key !== 'student_code') {
          // Í∏∞Ï°¥ ÏÜçÏÑ± ÌôïÏù∏
          const existing = await trx('student_attributes')
            .where({ student_id: id, attribute_name: key })
            .first();

          if (existing) {
            // ÏóÖÎç∞Ïù¥Ìä∏
            await trx('student_attributes')
              .where({ student_id: id, attribute_name: key })
              .update({
                attribute_value: String(value),
                updated_at: new Date()
              });
          } else {
            // ÏÉàÎ°ú ÏÇΩÏûÖ
            await trx('student_attributes').insert({
              student_id: id,
              attribute_name: key,
              attribute_value: String(value)
            });
          }
        }
      }

      // ÏàòÏ†ï Î°úÍ∑∏
      await logAction(req, 'UPDATE', 'students', id);
    });

    res.json({
      success: true,
      message: 'Student updated successfully'
    });

  } catch (error) {
    console.error('Error updating student:', error);
    res.status(500).json({
      success: false,
      error: error.message || 'Failed to update student'
    });
  }
});

// ÌïôÏÉù ÏÇ≠Ï†ú
router.delete('/:id', checkRole(['admin']), async (req, res) => {
  try {
    const { id } = req.params;

    // Ìä∏ÎûúÏû≠ÏÖò ÏãúÏûë
    await db.transaction(async trx => {
      // Í¥ÄÎ†® Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú
      await trx('student_attributes').where('student_id', id).del();
      await trx('consultations').where('student_id', id).del();
      await trx('students').where('student_id', id).del();

      // ÏÇ≠Ï†ú Î°úÍ∑∏
      await logAction(req, 'DELETE', 'students', id);
    });

    res.json({
      success: true,
      message: 'Student deleted successfully'
    });

  } catch (error) {
    console.error('Error deleting student:', error);
    res.status(500).json({
      success: false,
      error: error.message || 'Failed to delete student'
    });
  }
});

module.exports = router;