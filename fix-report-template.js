require('dotenv').config();
const knex = require('knex');

// DB ÏÑ§Ï†ï
const db = knex({
  client: 'postgresql',
  connection: {
    host: process.env.DB_HOST || 'aws-0-ap-northeast-2.pooler.supabase.com',
    port: process.env.DB_PORT || 6543,
    database: process.env.DB_NAME || 'postgres',
    user: process.env.DB_USER || 'postgres.zowugqovtbukjstgblwk',
    password: process.env.DB_PASSWORD || 'duyang3927duyang',
    ssl: { rejectUnauthorized: false }
  }
});

async function fixReportTemplate() {
  console.log('üß† ULTRATHINK: report_templates ÌÖåÏù¥Î∏î ÏàòÏ†ï');
  console.log('=' .repeat(70));

  try {
    // 1. report_templates ÌÖåÏù¥Î∏î ÌôïÏù∏
    const hasTable = await db.schema.hasTable('report_templates');
    
    if (!hasTable) {
      console.log('üìä report_templates ÌÖåÏù¥Î∏î ÏÉùÏÑ±');
      await db.schema.createTable('report_templates', table => {
        table.increments('template_id').primary();
        table.string('template_name', 100).notNullable();
        table.string('template_code', 50).notNullable().unique();
        table.text('description');
        table.string('report_type', 50);
        table.json('allowed_roles');
        table.boolean('is_active').defaultTo(true);
        table.timestamps(true, true);
      });
      
      console.log('‚úÖ report_templates ÌÖåÏù¥Î∏î ÏÉùÏÑ± ÏôÑÎ£å');
      
      // Í∏∞Î≥∏ ÌÖúÌîåÎ¶ø Îç∞Ïù¥ÌÑ∞ ÏÇΩÏûÖ
      await db('report_templates').insert([
        {
          template_name: 'ÌïôÏÉù Ï¢ÖÌï© ÏÉùÌôúÍ∏∞Î°ùÎ∂Ä',
          template_code: 'student_comprehensive',
          description: 'ÌïôÏÉùÏùò Î™®Îì† Ï†ïÎ≥¥Î•º Ìè¨Ìï®Ìïú Ï¢ÖÌï© Î≥¥Í≥†ÏÑú',
          report_type: 'comprehensive',
          allowed_roles: JSON.stringify(['admin', 'teacher', 'branch']),
          is_active: true
        },
        {
          template_name: 'ÌïôÏóÖ ÏÑ±Ï†Å Î≥¥Í≥†ÏÑú',
          template_code: 'academic_report',
          description: 'ÌïôÏóÖ ÏÑ±Ï†Å Î∞è TOPIK Í≤∞Í≥º Î≥¥Í≥†ÏÑú',
          report_type: 'academic',
          allowed_roles: JSON.stringify(['admin', 'teacher', 'branch']),
          is_active: true
        },
        {
          template_name: 'ÏÉÅÎã¥ Í∏∞Î°ù Î≥¥Í≥†ÏÑú',
          template_code: 'consultation_report',
          description: 'ÏÉÅÎã¥ ÎÇ¥Ïó≠ Ï¢ÖÌï© Î≥¥Í≥†ÏÑú',
          report_type: 'consultation',
          allowed_roles: JSON.stringify(['admin', 'teacher', 'branch']),
          is_active: true
        }
      ]);
      
      console.log('‚úÖ Í∏∞Î≥∏ ÌÖúÌîåÎ¶ø Îç∞Ïù¥ÌÑ∞ ÏÇΩÏûÖ ÏôÑÎ£å');
    } else {
      // Ïª¨Îüº ÌôïÏù∏
      const columns = await db.raw(`
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name = 'report_templates' 
        AND table_schema = 'public'
      `);
      
      const columnNames = columns.rows.map(col => col.column_name);
      console.log('üìä ÌòÑÏû¨ Ïª¨Îüº:', columnNames);
      
      // template_code Ïª¨ÎüºÏù¥ ÏóÜÏúºÎ©¥ Ï∂îÍ∞Ä
      if (!columnNames.includes('template_code')) {
        console.log('üìù template_code Ïª¨Îüº Ï∂îÍ∞Ä Ï§ë...');
        await db.schema.alterTable('report_templates', table => {
          table.string('template_code', 50).notNullable().defaultTo('default').unique();
        });
        
        // Í∏∞Ï°¥ Î†àÏΩîÎìúÏóê template_code Í∞í ÏÑ§Ï†ï
        const templates = await db('report_templates').select('*');
        for (const template of templates) {
          await db('report_templates')
            .where('template_id', template.template_id)
            .update({
              template_code: `template_${template.template_id}`
            });
        }
        
        console.log('‚úÖ template_code Ïª¨Îüº Ï∂îÍ∞Ä ÏôÑÎ£å');
      } else {
        console.log('‚úÖ template_code Ïª¨ÎüºÏù¥ Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï©ÎãàÎã§');
      }
    }
    
    // ÏµúÏ¢Ö ÌôïÏù∏
    const templates = await db('report_templates').select('*');
    console.log('\nüìä ÌòÑÏû¨ ÌÖúÌîåÎ¶ø Î™©Î°ù:');
    templates.forEach(t => {
      console.log(`  - ${t.template_code}: ${t.template_name}`);
    });
    
  } catch (error) {
    console.error('‚ùå Ïò§Î•ò:', error.message);
    console.error(error);
  } finally {
    await db.destroy();
  }
}

fixReportTemplate();